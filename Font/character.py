from freetype import Glyph
import numpy as np

class Character:
    """
    A class representing a character in a font.
    This class is only supposed to be used by Renderer.
    """
    def __init__(self, glyph:Glyph, space:int) -> None:
        """
        Initialize a new instance of the Character class.

        Parameters:
            glyph (Glyph): The Freetype glyph object representing the character.
            space (int): The space to be added to the right of the character.

        Returns:
            None
        """
        self.glyph = glyph
        self.space = space


    def getBitmap(self) -> tuple[list, tuple[int, int], tuple[int, int]]:
        """
        Retrieves the bitmap data of the character along with its dimensions and shift values.
        This method is supposed to be private.

        Parameters:
        No parameters are required for this function.

        Returns:
        A tuple containing the bitmap data as a buffer, the dimensions of the bitmap as a tuple (width, height), and the shift values for the top and bottom of the bitmap as a tuple (topShift, bottomShift).

        The bitmap data is obtained from the Freetype glyph object representing the character. The dimensions of the bitmap are calculated based on its width and height, and the shift values are determined by comparing the height of the bitmap with the top position of the bitmap in the glyph object.
        """
        bitmap = self.glyph.bitmap
        
        height = bitmap.rows
        width = bitmap.width

        top = self.glyph.bitmap_top

        diff = height - top

        bottomShift = max(0, diff)
        topShift = min(0, diff)

        return bitmap.buffer, (width, height), (topShift, bottomShift)
    
    def getCharacter(self) -> tuple[np.ndarray, tuple[int, int], tuple[int, int]]:
        """
        Retrieves the bitmap data of the character along with its dimensions and shift values,
        and then generates the character image.

        Parameters:
        No parameters are required for this function.

        Returns:
        A tuple containing the character image as a numpy array, the dimensions of the character image as a tuple (width, height), and the shift values for the top and bottom of the character image as a tuple (topShift, bottomShift).

        The character image is generated by reshaping the bitmap data obtained from the Freetype glyph object representing the character, and then adjusting the dimensions and shift values based on the bitmap data and the space added to the right of the character.
        """
        buffer, (width, height), (topShift, descent) = self.getBitmap()
        char = np.array(buffer).reshape((height, width))/255

        if len(buffer) == 0:
            char = np.zeros((1, self.space))
            return char, (self.space, 1), (topShift, descent)

        if self.space > 0:
            charSpace = np.zeros((height, self.space))
            char = np.hstack((char, charSpace))

        height, width = char.shape

        return char, (width, height), (topShift, descent)
    
    def calculateDimension(self) -> tuple[tuple[int, int], tuple[int, int]]:
        """
        Calculates the dimensions and shift values for the character.

        Parameters:
        No parameters are required for this function.

        Returns:
        A tuple containing the dimensions of the character image as a tuple (width, height), and the shift values for the top and bottom of the character image as a tuple (topShift, bottomShift).

        The dimensions of the character image are calculated based on the bitmap data obtained from the Freetype glyph object representing the character, and the space added to the right of the character. The shift values are determined by comparing the height of the bitmap with the top position of the bitmap in the glyph object.
        """
        bitmap = self.glyph.bitmap

        height = bitmap.rows
        width = bitmap.width + self.space
        diff = height - self.glyph.bitmap_top


        return (width, height), (max(0, diff), min(0, diff))
